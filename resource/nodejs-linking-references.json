[{"url":"https://libuv.org/","descrip":"libuv, a platform abstraction library with focus on asynchronous i/o.","title":"libuv | Cross-platform asynchronous I/O","auth":"Sa&uacute;l Ibarra Corretg&eacute;","date":1624308277},{"url":"https://nodeaddons.com/calling-native-c-dlls-from-a-node-js-web-app/","descrip":"Calling Native C++ DLLs from a Node.js Web App","title":"Calling Native C++ DLLs from a Node.js Web App","auth":"Scott Frees","date":1486646786},{"url":"https://en.wikipedia.org/wiki/Libffi","descrip":"https://en.wikipedia.org/wiki/Libffi","title":"libffi - Wikipedia","auth":"unknown","date":1659567057},{"url":"https://github.com/nodejs/node/pull/1865","descrip":"This is the big boy for the ffi label, adding a new public core module: require(ffi'). This is what I consider to be the final piece of the puzzle (other pieces being #1750, #1759, and #1762).\nI am the maintainer for the npm package, and while the APIs don't quite line up, I've always felt that the node-ffi API was too high level (doing things like dynamic library loading, and type boxing/unboxing), and what I have done in this PR is more along the lines of the direction I've wanted to take it.\nSo this is a good opportunity to get the low-level API correct/useful so that higher level facilities can be built on top (i.e. ctypes, ref's Type system, etc.) without needing to compile a native addon (this part is HUGE, especially considering the annoying V8 API changes in latest versions). Ideally we can abstract any V8 API changes away via this module and the npm userspace can contain code for bindings to C libs using the FFI api, which won't change often.\nMost of the diff here is just adding a gypified libffi to the deps dir. That's not so useful, so see this more useful diff for the integration code: 1ebc059...TooTallNate:idea/libffi-bindings\nA few things which I'd still like to figure out (and would like a comment on if anybody has a particular preference):\n\nWe need to compile some native code for the tests (i.e. to expose static function pointer Buffers to pass to ffi.call(), to invoke a C function pointer to test the ffi.Closure stuff). We could add a new process.binding('ffi_tests') internal binding that would only be loaded during the tests. Or another possibility would be for these ffi tests to rely on the dlopen module, and we can piggyback off of the shared library that gets loaded for the dlopen tests. Either way sounds good to me.\nThe async ffi.callAsync() function is not yet implemented. Working on that still though considering nodejs/hardware#9. 81f9b88\nDocs still needed as well.\nA helper for creating struct\" ffi_type instances.\nA \"variadic\" CIF interface (right now ffi.CIF only expects to describe fixed-length functions, but there is a variadic alternative: we just need a parameter to specify the number of fixed arguments vs. variable arguments).","title":"[Discussion] FFI - require(ffi') - libffi low-level binding by TooTallNate &middot; Pull Request #1865 &middot; nodejs/node &middot; GitHub","auth":"unknown","date":0},{"url":"https://nodejs.org/api/n-api.html","descrip":"https://nodejs.org/api/n-api.html","title":"Node-API | Node.js v18.7.0 Documentation","auth":"unknown","date":1658846184},{"url":"https://ticehurst.com/2019/07/10/minimal-nodejs-part-2.html","descrip":"This is a continuation from part 1. It is recommended to read this post first.","title":"Minimal Node.js native modules - N-API | ticehurst.com","auth":"Bill Ticehurst","date":1644092571},{"url":"https://medium.com/@a7ul/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f","descrip":"https://medium.com/@a7ul/beginners-guide-to-writing-nodejs-addons-using-c-and-n-api-node-addon-api-9b3b718a9a7f","title":"ðŸ¤– Beginners guide to writing NodeJS Addons using C++ and N-API (node-addon-api)","auth":"unknown","date":0},{"url":"https://riptutorial.com/node-js/example/31631/hello-to-n-api","descrip":"https://riptutorial.com/node-js/example/31631/hello-to-n-api","title":"Node.js Tutorial =&gt; Hello to N-API","auth":"unknown","date":0},{"url":"https://docs.w3cub.com/node/n-api/","descrip":"Not Found","title":"","auth":"","date":0},{"url":"https://github.com/node-ffi-napi/node-ffi-napi","descrip":"A foreign function interface (FFI) for Node.js, N-API style - GitHub - node-ffi-napi/node-ffi-napi: A foreign function interface (FFI) for Node.js, N-API style","title":"GitHub - node-ffi-napi/node-ffi-napi: A foreign function interface (FFI) for Node.js, N-API style","auth":"unknown","date":0},{"url":"https://github.com/nodejs/node-addon-api/blob/master/doc/promises.md","descrip":"Module for using Node-API from C++. Contribute to nodejs/node-addon-api development by creating an account on GitHub.","title":"node-addon-api/promises.md at main &middot; nodejs/node-addon-api &middot; GitHub","auth":"unknown","date":0},{"url":"https://en.wikipedia.org/wiki/GYP_%28software%29","descrip":"https://en.wikipedia.org/wiki/GYP_%28software%29","title":"GYP (software) - Wikipedia","auth":"unknown","date":1659569642},{"url":"https://medium.com/jspoint/a-simple-guide-to-load-c-c-code-into-node-js-javascript-applications-3fcccf54fd32/","descrip":"https://medium.com/jspoint/a-simple-guide-to-load-c-c-code-into-node-js-javascript-applications-3fcccf54fd32/","title":"A simple guide to load C/C++ code into Node.js JavaScript Applications","auth":"unknown","date":0},{"url":"https://github.com/Shouqun/node-gn","descrip":"Node.js native addon build tool with GN/ninja. Contribute to Shouqun/node-gn development by creating an account on GitHub.","title":"GitHub - Shouqun/node-gn: Node.js native addon build tool with GN/ninja.","auth":"unknown","date":0},{"url":"https://github.com/nodejs/node-gyp/issues/629","descrip":"It all started with this conversation. As I said, Im pretty much a newbie and I don't even know what node-gyp does, but what I DO know is that it's a pain to run Windows and install a project with node-gyp as a dependency. Some numbers:...","title":"Windows users are not happy. &middot; Issue #629 &middot; nodejs/node-gyp &middot; GitHub","auth":"unknown","date":0},{"url":"https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts","descrip":"This article has given you an explanation of what WebAssembly is, why it is so useful, how it fits into the web, and how you can make use of it.","title":"WebAssembly Concepts - WebAssembly | MDN","auth":"unknown","date":1659573766},{"url":"https://blog.scottlogic.com/2018/07/20/wasm-future.html","descrip":"WebAssembly is a performance optimised virtual machine that was shipped in all four major browsers earlier this year. It is a nascent technology and the current version is very much an MVP. This blog post takes a look at the WebAssembly roadmap and the features it might gain in the near future.","title":"The future of WebAssembly - A look at upcoming features and proposals","auth":"unknown","date":1659345718},{"url":"https://en.wikipedia.org/wiki/WebAssembly","descrip":"https://en.wikipedia.org/wiki/WebAssembly","title":"WebAssembly - Wikipedia","auth":"unknown","date":1659570890},{"url":"https://auth0.com/blog/7-things-you-should-know-about-web-assembly/","descrip":"Learn 7 things you should know about WebAssembly, one of the biggest changes the web will experience in the coming years.","title":"7 Things You Should Know About WebAssembly","auth":"unknown","date":0},{"url":"https://en.wikipedia.org/wiki/Quake_%28video_game%29","descrip":"https://en.wikipedia.org/wiki/Quake_%28video_game%29","title":"Quake (video game) - Wikipedia","auth":"unknown","date":1659563861}]